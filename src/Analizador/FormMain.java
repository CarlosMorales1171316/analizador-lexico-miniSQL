/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Analizador;

import java.awt.Color;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carlo
 */
public class FormMain extends javax.swing.JFrame {

    /**
     * Creates new form FormPrincipal
     */
    public FormMain() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    public Token Token = new Token();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblScanner = new javax.swing.JTable();
        btnAnalizarSintactico = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAnalizar.setBackground(new java.awt.Color(255, 153, 0));
        btnAnalizar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 610, 110, 340));

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 610, 930, 340));

        jButton1.setBackground(new java.awt.Color(255, 153, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton1.setText("Generar archivos .Java");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, 280, 50));

        tblScanner.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Linea", "# Columna Inicial", "# Columna Final", "Palabra Analizada", "Token"
            }
        ));
        jScrollPane2.setViewportView(tblScanner);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 930, 310));

        btnAnalizarSintactico.setBackground(new java.awt.Color(255, 153, 0));
        btnAnalizarSintactico.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAnalizarSintactico.setText("Analizar");
        btnAnalizarSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarSintacticoActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnalizarSintactico, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 180, 110, 310));

        jPanel2.setBackground(new java.awt.Color(102, 0, 0));

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ANALIZADOR LÉXICO");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(302, 302, 302)
                .addComponent(jLabel1)
                .addContainerGap(342, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1070, -1));

        jPanel4.setBackground(new java.awt.Color(102, 0, 0));

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ANALIZADOR SINTÁCTICO");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(262, 262, 262)
                .addComponent(jLabel3)
                .addContainerGap(282, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 1070, 100));

        pack();
    }// </editor-fold>//GEN-END:initComponents

        final String path = System.getProperty("user.dir");
        final String path2 = "/src/Analizador/";
       
        String ruta0 = path+path2+"Lexer.flex";
        
        String ruta1 = path+path2+"Alexico.flex";
        String ruta2 = path+path2+"LexerCup.flex";
        String ruta3 = path+path2+"Sintax.cup";
        String ruta4 = path+"/"+"sym.java";
        String ruta5 = path+path2+"sym.java";
        String ruta6 = path+"/"+"Sintax.java";
        String ruta7 = path+path2+"Sintax.java";
        String[] rutaSintactico = {"-parser", "Sintax", ruta3};
        
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            generar(ruta1,ruta2,rutaSintactico);
            generarFlex(ruta0);
            
        } catch (Exception ex) {
            Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAnalizarSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarSintacticoActionPerformed
        // TODO add your handling code here:

        final String path = System.getProperty("user.dir");
        final String path2 = "/src/Analizador/";

        JFileChooser jfileChooser = new JFileChooser();
        jfileChooser.showOpenDialog(null);

        String NombreArchivoEntrada ="";

        NombreArchivoEntrada = jfileChooser.getSelectedFile().getName();
        String [] split = NombreArchivoEntrada.split("\\.");
        NombreArchivoEntrada=split[0];

        DefaultTableModel tabla = (DefaultTableModel) tblScanner.getModel();

        //Listas con repetición
        ArrayList<String> listaReservada = new ArrayList<>();
        ArrayList<String> listaIdentificador = new ArrayList<>();
        ArrayList<String> listaBit = new ArrayList<>();
        ArrayList<String> listaInt = new ArrayList<>();
        ArrayList<String> listaFloat = new ArrayList<>();
        ArrayList<String> listaString = new ArrayList<>();

        String[] reservadas = {"ADD","NAME","EXTERNAL","PROCEDURE","ALL","FETCH","PUBLIC","ALTER","FILE","RAISERROR","AND","FILLFACTOR","READ","ANY","FOR","READTEXT","AS","FOREIGN","RECONFIGURE","ASC","FREETEXT","AUTHORIZATION","FREETEXTTABLE","REPLICATION","BACKUP","RESTORE","BEGIN","FULL","RESTRICT","BETWEEN","FUNCTION","RETURN","BREAK","GOTO","REVERT","BROWSE","GRANT","BULK","GROUP","RIGHT","CASCADE","HOLDLOCK","ROWCOUNT","CASE","IDENTITY","ROWGUIDCOL","IDENTITY_INSERT","RULE","CHECKPOINT","IDENTITYCOL","SAVE","CLOSE","IF","SCHEMA","CLUSTERED","IN","SECURITYAUDIT","COALESCE","INDEX","COLLATE","SEMANTICKEYPHRASETABLE","COLUMN","INSERT","SEMANTICSIMILARITYDETAILSTABLE","COMMIT","INTERSECT","SEMANTICSIMILARITYTABLE","COMPUTE","SESSION_USER","CONSTRAINT","IS","SET","CONTAINS","SETUSER","CONTAINSTABLE","KEY","SHUTDOWN","KILL","CONVERT","STATISTICS","LIKE","SYSTEM_USER","CROSS","LINENO","TABLE","LOAD","TABLESAMPLE","MERGE","TEXTSIZE","NOCHECK","TO","NONCLUSTERED","TOP","CURSOR","NOT","TRAN","DATABASE","TRANSACTION","DBCC","NULLIF","TRIGGER","OF","TRUNCATE","DECLARE","OFF","TRY_CONVERT","DEFAULT","OFFSETS","TSEQUAL","DELETE","DENY","OPEN","UNIQUE","DESC","OPENDATASOURCE","UNPIVOT","DISK","OPENQUERY","DISTINCT","OPENROWSET","UPDATETEXT","DISTRIBUTED","OPENXML","USE","USER","DROP","OR","DUMP","ORDER","VARYING","END","OVER","WAITFOR","ERRLVL","PERCENT","WHEN","ESCAPE","PIVOT","WHERE","EXCEPT","PLAN","WHILE","EXEC","PRECISION","WITH","EXECUTE","WITHINGROUP","PRINT","WRITETEXT","EXIT","PROC","LABEL","OVERLAPS","ACTION","PAD","ADA","EXISTS","PARTIAL","PASCAL","EXTRACT","POSITION","FALSE","PREPARE","FIRST","PRESERVE","FLOAT","PRIMARY","ARE","PRIOR","PRIVILEGES","FORTRAN","FOUND","AT","FROM","REAL","AVG","GET","REFERENCES","GLOBAL","RELATIVE","GO","REVOKE","BIT_LENGTH","BOTH","ROLLBACK","BY","HAVING","ROWS","HOUR","CASCADED","SCROLL","SECOND","SECTION","CATALOG","INCLUDE","SELECT","CHAR","SESSION","CHAR_LENGTH","INDICATOR","CHARACTER","INITIALLY","CHARACTER_LENGTH","INNER","SIZE","CHECK","INPUT","SMALLINT","INSENSITIVE","SOME","SPACE","INT","COLLATION","INTEGER","SQLCA","SQLCODE","INTERVAL","SQLERROR","CONNECT","INTO","CONNECTION","ISOLATION","SUBSTRING","CONSTRAINTS","JOIN","SUM","CONTINUE","LANGUAGE","CORRESPONDING","LAST","TEMPORARY","COUNT","LEADING","THEN","CREATE","LEFT","TIME","LEVEL","TIMESTAMP","CURRENT","TIMEZONE_HOUR","CURRENT_DATE","LOCAL","TIMEZONE_MINUTE","CURRENT_TIME","LOWER","CURRENT_TIMESTAMP","MATCH","TRAILING","CURRENT_USER","MAX","MIN","TRANSLATE","DATE","MINUTE","TRANSLATION","DAY","MODULE","TRIM","DEALLOCATE","MONTH","TRUE","DEC","NAMES","UNION","DECIMAL","NATIONAL","NATURAL","UNKNOWN","NCHAR","UPDATE","DEFERRABLE","NEXT","UPPER","DEFERRED","USAGE","USING","DESCRIBE","NULL","VALUE","DESCRIPTOR","VALUES","NUMERIC","VARCHAR","DISCONNECT","OCTET_LENGTH","VIEW","DOMAIN","ON","DOUBLE","ONLY","WHENEVER","ELSE","OPTION","WORK","WRITE","OUTER","YEAR","OUTPUT","ZONE","EXCEPTION","ABSOLUTE","HOST","RELEASE","ADMIN","IGNORE","RESULT","AFTER","IMMEDIATE","RETURNS","AGGREGATE","ROLE","ALIAS","INITIALIZE","ROLLUP","ALLOCATE","ROUTINE","INOUT","ROW","ARRAY","ASENSITIVE","SAVEPOINT","ASSERTION","ASYMMETRIC","INTERSECTION","SCOPE","SEARCH","ATOMIC","BEFORE","ITERATE","BINARY","SENSITIVE","BIT","LARGE","SEQUENCE","BLOB","BOOLEAN","LATERAL","SETS","SIMILAR","BREADTH","LESS","CALL","CALLED","LIKE_REGEX","CARDINALITY","LIMIT","SPECIFIC","LN","SPECIFICTYPE","CAST","SQL","LOCALTIME","SQLEXCEPTION","LOCALTIMESTAMP","SQLSTATE","LOCATOR","SQLWARNING","CLASS","MAP","START","CLOB","STATE","MEMBER","STATEMENT","COLLECT","METHOD","STATIC","COMPLETION","STDDEV_POP","CONDITION","MOD","STDDEV_SAMP","MODIFIES","STRUCTURE","MODIFY","SUBMULTISET","SUBSTRING_REGEX","CONSTRUCTOR","SYMMETRIC","CORR","MULTISET","SYSTEM","COVAR_POP","TERMINATE","COVAR_SAMP","THAN","CUBE","NCLOB","CUME_DIST","NEW","CURRENT_CATALOG","CURRENT_DEFAULT_TRANSFORM_GROUP","NO","CURRENT_PATH","NONE","CURRENT_ROLE","NORMALIZE","TRANSLATE_REGEX","CURRENT_SCHEMA","CURRENT_TRANSFORM_GROUP_FOR_TYPE","OBJECT","TREAT","CYCLE","OCCURRENCES_REGEX","DATA","OLD","UESCAPE","UNDER","OPERATION","ORDINALITY","UNNEST","OUT","OVERLAY","DEPTH","VAR_POP","DEREF","PARAMETER","VAR_SAMP","PARAMETERS","VARIABLE","DESTROY","PARTITION","DESTRUCTOR","PATH","WIDTH_BUCKET","DETERMINISTIC","POSTFIX","WITHOUT","DICTIONARY","PREFIX","WINDOW","DIAGNOSTICS","PREORDER","WITHIN","PERCENT_RANK","DYNAMIC","PERCENTILE_CONT","XMLAGG","EACH","PERCENTILE_DISC","XMLATTRIBUTES","ELEMENT","POSITION_REGEX","XMLBINARY","XMLCAST","EQUALS","XMLCOMMENT","EVERY","XMLCONCAT","RANGE","XMLDOCUMENT","READS","XMLELEMENT","FILTER","XMLEXISTS","RECURSIVE","XMLFOREST","REF","XMLITERATE","REFERENCING","XMLNAMESPACES","FREE","REGR_AVGX","XMLPARSE","FULLTEXTTABLE","REGR_AVGY","XMLPI","FUSION","REGR_COUNT","XMLQUERY","GENERAL","REGR_INTERCEPT","XMLSERIALIZE","REGR_R2","XMLTABLE","REGR_SLOPE","XMLTEXT","REGR_SXX","XMLVALIDATE","GROUPING","REGR_SXY","HOLD","REGR_SYY"};

        try {
            Reader reader = new BufferedReader (new FileReader(jfileChooser.getSelectedFile()));
            Lexer lexer = new Lexer(reader);

            ArrayList<String>contenidoLista = new ArrayList<>();
            Path file = Paths.get(path+path2+NombreArchivoEntrada+".out");

            while (true) {
                TokensLexico tokensLexico = lexer.yylex();
                    
                if (tokensLexico == null) {
                    Files.write(file, contenidoLista, StandardCharsets.UTF_8);
                    // bw.close();
                    return;
                }

                for (String string : reservadas) {
                    if(lexer.toString.equals(string)) {
                        String [] fila1 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Reservada"};
                        tabla.addRow(fila1);
                        contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Reservada");
                        listaReservada.add(lexer.toString);
                        if (lexer.toString.equals("NULL") && (!listaBit.contains(lexer.toString))) {
                            listaBit.add(lexer.toString);
                        }
                    }
                }
                switch (tokensLexico) {

                    case Error_Caracter_Invalido:
                    String [] fila1 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Carácter Inválido"};
                    tabla.addRow(fila1);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Carácter Inválido");
                    break;
                    case Error_Cadena_Invalida:
                    String [] fila2 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Cadena Inválida"};
                    tabla.addRow(fila2);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Cadena Inválida");
                    break;
                    case Error_Comentario_Sin_Cerrar:
                    String [] fila3 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Comentario Sin Terminar"};
                    tabla.addRow(fila3);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Comentario Sin Terminar");
                    break;
                    case Identificador:
                    if (lexer.yylength() > 31) {
                        String identificador = "";
                        int columnaFinal = 0;
                        identificador = lexer.yytext().substring(0,31);
                        columnaFinal = lexer.getColumnaInicial+30;
                        String columnaFinalString = Integer.toString(columnaFinal);
                        String [] fila4 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),columnaFinalString,identificador,"Indentificador De Longitud Excedida"};
                        tabla.addRow(fila4);
                        contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + columnaFinalString +" " + "Palabra analizada: " + identificador +" " + "Token: " + "Identificador De Longitud Excedida");
                        listaIdentificador.add(identificador);
                    }
                    else {
                        String [] fila4 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString, tokensLexico.toString()};
                        tabla.addRow(fila4);
                        contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + tokensLexico.toString());
                        listaIdentificador.add(lexer.toString);
                    }
                    break;
                    case Suma:
                    String [] fila4_1 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Suma"};
                    tabla.addRow(fila4_1);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Suma");
                    break;
                    case Resta:
                    String [] fila4_2 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Resta"};
                    tabla.addRow(fila4_2);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Resta");
                    break;
                    case Multiplicacion:
                    String [] fila4_3 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Multiplicación"};
                    tabla.addRow(fila4_3);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Multiplicación");
                    break;
                    case Division:
                    String [] fila4_4 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"División"};
                    tabla.addRow(fila4_4);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "División");
                    break;
                    case Porcentaje:
                    String [] fila4_5 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Porcentaje"};
                    tabla.addRow(fila4_5);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Porcentaje");
                    break;
                    case Menor:
                    String [] fila4_6 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Menor"};
                    tabla.addRow(fila4_6);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Menor");
                    break;
                    case Menor_o_igual:
                    String [] fila4_7 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Menor o igual"};
                    tabla.addRow(fila4_7);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Menor o igual");
                    break;
                    case Mayor:
                    String [] fila4_8 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Mayor"};
                    tabla.addRow(fila4_8);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Mayor");
                    break;
                    case Mayor_o_igual:
                    String [] fila4_9 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Mayor o igual"};
                    tabla.addRow(fila4_9);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Mayor o igual");
                    break;
                    case Igual:
                    String [] fila4_10 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Igual"};
                    tabla.addRow(fila4_10);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Igual");
                    break;
                    case Igualdad:
                    String [] fila4_11 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Igualdad"};
                    tabla.addRow(fila4_11);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Igualdad");
                    break;
                    case Diferente:
                    String [] fila4_12 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Diferente"};
                    tabla.addRow(fila4_12);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Diferente");
                    break;
                    case And:
                    String [] fila4_13 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"And"};
                    tabla.addRow(fila4_13);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "And");
                    break;
                    case Or:
                    String [] fila4_14 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Or"};
                    tabla.addRow(fila4_14);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Or");
                    break;
                    case Not:
                    String [] fila4_15 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Not"};
                    tabla.addRow(fila4_15);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Not");
                    break;
                    case Punto_y_coma:
                    String [] fila4_16 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Punto y coma"};
                    tabla.addRow(fila4_16);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Punto y coma");
                    break;
                    case Coma:
                    String [] fila4_17 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Coma"};
                    tabla.addRow(fila4_17);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Coma");
                    break;
                    case Punto:
                    String [] fila4_18 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Punto"};
                    tabla.addRow(fila4_18);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Punto");
                    break;
                    case Corchete_de_apertura:
                    String [] fila4_19 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Corchete_de_apertura"};
                    tabla.addRow(fila4_19);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Corchete_de_apertura");
                    break;
                    case Corchete_de_cierre:
                    String [] fila4_20 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Corchete_de_cerradura"};
                    tabla.addRow(fila4_20);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Corchete_de_cerradura");
                    break;
                    case Corchetes:
                    String [] fila4_21 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Corchetes"};
                    tabla.addRow(fila4_21);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Corchetes");
                    break;
                    case Parentesis_de_apertura:
                    String [] fila4_22 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Paréntesis_de_apertura"};
                    tabla.addRow(fila4_22);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Paréntesis_de_apertura");
                    break;
                    case Parentesis_de_cierre:
                    String [] fila4_23 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Paréntesis_de_cerradura"};
                    tabla.addRow(fila4_23);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Paréntesis_de_cerradura");
                    break;
                    case Parentesis:
                    String [] fila4_24 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Paréntesis"};
                    tabla.addRow(fila4_24);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Paréntesis");
                    break;
                    case Llave_de_apertura:
                    String [] fila4_25 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Llave_de_apertura"};
                    tabla.addRow(fila4_25);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Llave_de_apertura");
                    break;
                    case Llave_de_cierre:
                    String [] fila4_26 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Llave_de_cerradura"};
                    tabla.addRow(fila4_26);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Llave_de_cerradura");
                    break;
                    case Llaves:
                    String [] fila4_27 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Llaves"};
                    tabla.addRow(fila4_27);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Llaves");
                    break;
                    case Arroba:
                    String [] fila4_28 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Arroba"};
                    tabla.addRow(fila4_28);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Arroba");
                    break;
                    case Numeral:
                    String [] fila4_29 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Numeral"};
                    tabla.addRow(fila4_29);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Numeral");
                    break;
                    case Doble_numeral:
                    String [] fila4_30 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,"Doble Numeral"};
                    tabla.addRow(fila4_30);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + "Doble Numeral");
                    break;
                    case Int:
                    String [] fila6 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,tokensLexico.toString()};
                    tabla.addRow(fila6);
                    listaInt.add(lexer.toString);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + tokensLexico.toString());
                    break;
                    case Float:
                    String [] fila7 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,tokensLexico.toString()};
                    tabla.addRow(fila7);
                    listaFloat.add(lexer.toString);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + tokensLexico.toString());
                    break;
                    case String:
                    String [] fila8 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,tokensLexico.toString()};
                    tabla.addRow(fila8);
                    listaString.add(lexer.toString);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + tokensLexico.toString());
                    break;
                    case Bit:
                    String [] fila9 = {lexer.getLinea.toString(),lexer.getColumnaInicial.toString(),lexer.getColumnaFinal.toString(),lexer.toString,tokensLexico.toString()};
                    tabla.addRow(fila9);
                    listaBit.add(lexer.toString);
                    contenidoLista.add("Linea: " + lexer.getLinea.toString() +" " + "Columna: " +lexer.getColumnaInicial.toString() +" a " + lexer.getColumnaFinal.toString() +" " + "Palabra analizada: " + lexer.toString +" " + "Token: " + tokensLexico.toString());
                    if (lexer.toString.equals("1") && (!listaInt.contains(lexer.toString))) {
                        listaInt.add(lexer.toString);
                    }
                    if (lexer.toString.equals("0") && (listaInt.contains(lexer.toString))) {
                        listaInt.add(lexer.toString);
                    }
                    break;
                    default:
                    break;
                }
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarSintacticoActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
      
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        
        TokenAnalisis Analizador = new TokenAnalisis();
        LinkedList ListaLexica = new LinkedList();

        try {
            Reader lector;
            lector = new BufferedReader(new FileReader(chooser.getSelectedFile()));
            ALexico alexico = new ALexico(lector);     

            while (true)
            {
                Tokens tokens = alexico.yylex();
                if (tokens == null)
                {
                    String Datos = AnalizadorLexico(AnalizarDatos(ListaLexica));
                    AnalizadorSintactico(Datos);
                    return;
                }
                // <editor-fold defaultstate="collapsed" desc="switch">  
                switch (tokens) {

                    case ERROR:                    
                    Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                    ListaLexica.offer(Analizador);
                    break;

                    case Identificador:

                    if(alexico.lexeme.length() > 31)
                    {                      
                        Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                        ListaLexica.offer(Analizador);
                    }
                    else
                    {                      
                        Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                        ListaLexica.offer(Analizador);
                    }
                    break;

                    case ADD:
                    case AND:
                    case OR:
                    case EXTERNAL:
                    case FETCH:
                    case PUBLIC:
                    case ALTER:
                    case FILE:
                    case RAISERROR:
                    case FILLFACTOR:
                    case READ:
                    case ANY:
                    case FOR:
                    case READTEXT:
                    case AS:
                    case FOREIGN:
                    case RECONFIGURE:
                    case FREETEXT:
                    case REFERENCES:
                    case AUTHORIZATION:
                    case FREETEXTTABLE:
                    case REPLICATION:
                    case BACKUP:
                    case FROM:
                    case RESTORE:
                    case BEGIN:
                    case FULL:
                    case RESTRICT:
                    case BETWEEN:
                    case FUNCTION:
                    case RETURN:
                    case BREAK:
                    case GOTO:
                    case REVERT:
                    case BROWSE:
                    case GRANT:
                    case REVOKE:
                    case BULK:
                    case GROUP:
                    case RIGHT:
                    case BY:
                    case HAVING:
                    case ROLLBACK:
                    case CASCADE:
                    case HOLDLOCK:
                    case ROWCOUNT:
                    case CASE:
                    case IDENTITY:
                    case ROWGUIDCOL:
                    case CHECK:
                    case IDENTITY_INSERT:
                    case RULE:
                    case CHECKPOINT:
                    case IDENTITYCOL:
                    case SAVE:
                    case CLOSE:
                    case IF:
                    case SCHEMA:
                    case CLUSTERED:
                    case IN:
                    case SECURITYAUDIT:
                    case COALESCE:
                    case INDEX:
                    case SELECT:
                    case COLLATE:
                    case INNER:
                    case SEMANTICKEYPHRASETABLE:
                    case COLUMN:
                    case INSERT:
                    case SEMANTICSIMILARITYDETAILSTABLE:
                    case COMMIT:
                    case INTERSECT:
                    case SEMANTICSIMILARITYTABLE:
                    case COMPUTE:
                    case INTO:
                    case SESSION_USER:
                    case CONSTRAINT:
                    case IS:
                    case SET:
                    case CONTAINS:
                    case JOIN:
                    case SETUSER:
                    case CONTAINSTABLE:
                    case KEY:
                    case SHUTDOWN:
                    case CONTINUE:
                    case KILL:
                    case SOME:
                    case CONVERT:
                    case LEFT:
                    case STATISTICS:
                    case CREATE:
                    case LIKE:
                    case SYSTEM_USER:
                    case CROSS:
                    case LINENO:
                    case TABLE:
                    case CURRENT:
                    case LOAD:
                    case TABLESAMPLE:
                    case CURRENT_DATE:
                    case MERGE:
                    case TEXTSIZE:
                    case CURRENT_TIME:
                    case NATIONAL:
                    case THEN:
                    case CURRENT_TIMESTAMP:
                    case NOCHECK:
                    case TO:
                    case CURRENT_USER:
                    case NONCLUSTERED:
                    case TOP:
                    case CURSOR:
                    case NOT:
                    case TRAN:
                    case DATABASE:
                    case NULL:
                    case TRANSACTION:
                    case DBCC:
                    case NULLIF:
                    case TRIGGER:
                    case DEALLOCATE:
                    case OF:
                    case TRUNCATE:
                    case DECLARE:
                    case OFF:
                    case TRY_CONVERT:
                    case DEFAULT:
                    case OFFSETS:
                    case TSEQUAL:
                    case DELETE:
                    case UNION:
                    case DENY:
                    case OPEN:
                    case UNIQUE:
                    case DESC:
                    case OPENDATASOURCE:
                    case UNPIVOT:
                    case DISK:
                    case OPENQUERY:
                    case UPDATE:
                    case DISTINCT:
                    case OPENROWSET:
                    case UPDATETEXT:
                    case DISTRIBUTED:
                    case OPENXML:
                    case USE:
                    case DOUBLE:
                    case OPTION:
                    case USER:
                    case DROP:
                    case VALUES:
                    case DUMP:
                    case ORDER:
                    case ARYING:
                    case ELSE:
                    case OUTER:
                    case VIEW:
                    case END:
                    case OVER:
                    case WAITFOR:
                    case ERRLVL:
                    case PERCENT:
                    case WHEN:
                    case ESCAPE:
                    case PIVOT:
                    case WHERE:
                    case EXCEPT:
                    case PLAN:
                    case WHILE:
                    case EXEC:
                    case PRECISION:
                    case WITH:
                    case EXECUTE:
                    case PRIMARY:
                    case WITHIN_GROUP:
                    case EXISTS:
                    case PRINT:
                    case WRITETEXT:
                    case EXIT:
                    case PROC:
                    case ABSOLUTE:
                    case OVERLAPS:
                    case ACTION:
                    case PAD:
                    case ADA:
                    case PARTIAL:
                    case PASCAL:
                    case ALL:
                    case EXTRACT:
                    case POSITION:
                    case ALLOCATE:
                    case FALSE:
                    case PREPARE:
                    case FIRST:
                    case PRESERVE:
                    case FLOAT:
                    case ARE:
                    case PRIOR:
                    case PRIVILEGES:
                    case ASC:
                    case FORTRAN:
                    case PROCEDURE:
                    case ASSERTION:
                    case FOUND:
                    case AT:
                    case REAL:
                    case AVG:
                    case GET:
                    case GLOBAL:
                    case RELATIVE:
                    case GO:
                    case BIT:
                    case BIT_LENGTH:
                    case BOTH:
                    case ROWS:
                    case HOUR:
                    case CASCADED:
                    case SCROLL:
                    case IMMEDIATE:
                    case SECOND:
                    case CAST:
                    case SECTION:
                    case CATALOG:
                    case INCLUDE:
                    case CHAR:
                    case SESSION:
                    case CHAR_LENGTH:
                    case INDICATOR:
                    case CHARACTER:
                    case INITIALLY:
                    case CHARACTER_LENGTH:
                    case SIZE:
                    case INPUT:
                    case SMALLINT:
                    case INSENSITIVE:
                    case SPACE:
                    case INT:
                    case SQL:
                    case COLLATION:
                    case INTEGER:
                    case SQLCA:
                    case SQLCODE:
                    case INTERVAL:
                    case SQLERROR:
                    case CONNECT:
                    case SQLSTATE:
                    case CONNECTION:
                    case SQLWARNING:
                    case ISOLATION:
                    case SUBSTRING:
                    case CONSTRAINTS:
                    case SUM:
                    case LANGUAGE:
                    case CORRESPONDING:
                    case LAST:
                    case TEMPORARY:
                    case COUNT:
                    case LEADING:
                    case TIME:
                    case LEVEL:
                    case TIMESTAMP:
                    case TIMEZONE_HOUR:
                    case LOCAL:
                    case TIMEZONE_MINUTE:
                    case LOWER:
                    case MATCH:
                    case TRAILING:
                    case MAX:
                    case MIN:
                    case TRANSLATE:
                    case DATE:
                    case MINUTE:
                    case TRANSLATION:
                    case DAY:
                    case MODULE:
                    case TRIM:
                    case MONTH:
                    case TRUE:
                    case DEC:
                    case NAMES:
                    case DECIMAL:
                    case NATURAL:
                    case UNKNOWN:
                    case NCHAR:
                    case DEFERRABLE:
                    case NEXT:
                    case UPPER:
                    case DEFERRED:
                    case NO:
                    case USAGE:
                    case NONE:
                    case USING:
                    case DESCRIBE:
                    case VALUE:
                    case DESCRIPTOR:
                    case DIAGNOSTICS:
                    case NUMERIC:
                    case VARCHAR:
                    case DISCONNECT:
                    case OCTET_LENGTH:
                    case VARYING:
                    case DOMAIN:
                    case ON:
                    case ONLY:
                    case WHENEVER:
                    case WORK:
                    case END_EXEC:
                    case WRITE:
                    case YEAR:
                    case OUTPUT:
                    case ZONE:
                    case EXCEPTION:
                    case OUT:
                    case READONLY:
                    case ENCRYPTION:
                    case RETURNS:
                    case SCHEMABINDING:
                    case CALLED:
                    case INLINE:
                    case CALLER:
                    case SELF:
                    case OWNER:
                    case RECOMPILE:
                    case MARK:
                    case FORWARD_ONLY:
                    case STATIC:
                    case KEYSET:
                    case DYNAMIC:
                    case FAST_FORWARD:
                    case READ_ONLY:
                    case SCROLL_LOCKS:
                    case OPTIMISTIC:
                    case TYPE_WARNING:
                   
                    Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                    ListaLexica.offer(Analizador);
                    break;

                    case StringE:
                    Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                    ListaLexica.offer(Analizador);
                    break;

                    case Int:
                    case String:
                    case Float:
                    case Bit:
                    Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                    ListaLexica.offer(Analizador);
                    break;

                    case Comentario:
                    //DO NOTHING
                    break;

                    case ComentarioE:                    
                    Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                    ListaLexica.offer(Analizador);
                    break;

                    default:
                    if(tokens.toString().contains("_"))
                    {
                        Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                        ListaLexica.offer(Analizador);
                    }
                    else
                    {
                        Analizador = new TokenAnalisis(tokens,alexico.lexeme,alexico.line+1,alexico.initialcolumn, alexico.finalcolumn);
                        ListaLexica.offer(Analizador);
                    }
                    break;
                }
            }
            // </editor-fold>

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed
  
    
     //METODO ANALIZADOR SINTÁCTICO 
     //ERRORES SINTÁCTICOS EN LISTA ENLAZADA
     public void AnalizadorSintactico(String data) throws Exception {

        LinkedList<String> ErroresSintacticos = null;
        Sintax s = new Sintax(new Analizador.LexerCup(new StringReader(data)));
        String Contenido = "";
        
        txtResultado.setText("");        
        s.parse();
        
        //Lista de errores sintácticos
        ErroresSintacticos = s.erroresSintacticos;
        
        for(String element: ErroresSintacticos){
                if(Contenido.contains(element) == false)
                {
                Contenido += element + "\r\n";
                }
        }
        
        if (ErroresSintacticos.isEmpty()) {
            txtResultado.setText("Archivo Sintácticamente Correcto");
            txtResultado.setForeground(Color.GREEN);
        }
        else{
            txtResultado.setText(Contenido);
            txtResultado.setForeground(Color.RED);
        }
        
    }
    
     //METODO ANALIZADOR LEXICO
     private String AnalizadorLexico(LinkedList listaLexica) throws IOException {
         
        StringBuilder builder = new StringBuilder();
        
        int linea = 1;
        int columnaInicial = 0;
        int columnaFinal = 0;
        String Linea = "";
               
        TokenAnalisis Token;

        while (listaLexica.peek() != null){
            Token = (TokenAnalisis) listaLexica.poll();
            columnaInicial = Token.columnai;
            
            if (Token.linea == linea){
                while (columnaInicial - columnaFinal > 1){
                    Linea += ' ';
                    columnaFinal++;
                }
                Linea += Token.produccion;
                columnaFinal = Token.columnaf;
            }
            else{
                Linea += "\n";
                builder.append(Linea);
                linea++;
                
                while(Token.linea != linea){
                    Linea = "";
                    Linea += "\n";
                    builder.append(Linea);
                    linea++;
                }
                Linea = "";
                Linea += Token.produccion;
                columnaFinal = Token.columnaf;
            }
        }
        builder.append(Linea);
        return builder.toString();
    }
    

     public void generar(String Ruta1, String Ruta2, String[] RutaSintactico) throws IOException, Exception{
        
         File file;
        file = new File (Ruta1);
        JFlex.Main.generate(file);
        file = new File (Ruta2);
        JFlex.Main.generate(file);
        java_cup.Main.main(RutaSintactico);
        
        Path rutaSym = Paths.get(ruta5);
        if(Files.exists(rutaSym)){
            Files.delete(rutaSym);
        }
        Files.move(
                Paths.get(ruta4), 
                Paths.get(ruta5)
        ); 
        
        Path rutaSin = Paths.get(ruta7);
        if(Files.exists(rutaSin)){
            Files.delete(rutaSin);
        }
        Files.move(
                Paths.get(ruta6), 
                Paths.get(ruta7)
        );
    }
     
      public void generarFlex(String Ruta1) {
        File file;
        file = new File (Ruta1);
        JFlex.Main.generate(file);
    }
      
     //METODO ANALIZAR DATOS
     //ANALIZA LOS DATOS DE LA LISTA LEXICA
     public LinkedList<TokenAnalisis> AnalizarDatos(LinkedList listaAnalizadorLexico) {
        
        Queue<TokenAnalisis> listaPivote = new LinkedList<>();
        Queue<TokenAnalisis> lista = new LinkedList<>();
        Queue<TokenAnalisis> listaLexica = new LinkedList<>();
        
        boolean bandera_error = false;
        int count;
            
        TokenAnalisis TokenEx = new TokenAnalisis();
        TokenAnalisis TokenAux = new TokenAnalisis();
        TokenAux = (TokenAnalisis) listaAnalizadorLexico.remove();
        listaPivote.add(TokenAux);
        
        while(listaPivote.isEmpty() == false && !listaAnalizadorLexico.isEmpty()) {
            TokenAux = (TokenAnalisis) listaAnalizadorLexico.poll();
            listaPivote.add(TokenAux);
            
            if(TokenAux.produccion.equals(";") || TokenAux.produccion.equals("GO")){
                TokenAux = (TokenAnalisis) listaAnalizadorLexico.poll();
                
                if(TokenAux != null){
                    if(TokenAux.produccion.equals(";") || TokenAux.produccion.equals("GO")){
                        listaPivote.add(TokenAux);
                        TokenAux = (TokenAnalisis) listaAnalizadorLexico.poll();
                    }
                }
                count = listaPivote.size();
                for (int i = 0; i < count; i++) {
                    
                    TokenEx = listaPivote.poll();
                    //Posibles errores
                    if(TokenEx.produccion.equals("ERROR") || TokenEx.produccion.equals("ComentarioE") || TokenEx.produccion.equals("StringE")){
                        bandera_error =  true;
                    }
                    else {
                        lista.add(TokenEx);
                    }
                }
                
                if(bandera_error == false) {
                    if(lista.isEmpty() == false) {
                        while(lista.isEmpty() == false) {
                            listaLexica.add(lista.remove());
                        }
                        listaPivote.add(TokenAux);
                    }
                }
                else {
                    lista.clear();
                    if(TokenAux != null){
                        listaPivote.add(TokenAux);
                        bandera_error = false;
                    }
                }                
            }  
        }
        if(!listaPivote.isEmpty())
        {
            while(listaPivote.isEmpty() == false)
            {
              if(listaPivote.peek() != null)
              {
              listaLexica.add(listaPivote.remove());
              }
              else
              {
                  listaPivote.remove();
              }
            }
        }
        listaAnalizadorLexico = (LinkedList) listaLexica;
        return listaAnalizadorLexico;
    }  
     
        // <editor-fold defaultstate="collapsed" desc="writeTXT">  
    /*
    public void writeTXT(DefaultTableModel table) throws IOException, ClassNotFoundException, SQLException {
  Writer writer = null;
  try{
    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("C:/Users/carlo/Documents/NetBeansProjects/analizador-lexico-miniSQL/src/AnalizadorLexico/PRUEBA.out")));
    StringBuffer bufferHeader = new StringBuffer();
    for(int i = 0; i<table.getColumnCount();i++){
      bufferHeader.append(table.getColumnName(i));
      if(i!=table.getColumnCount()) bufferHeader.append(" ");
    }
    writer.write(bufferHeader.toString()+"\r\n");

    for(int j = 0; j<table.getRowCount(); j++){
      StringBuffer buffer = new StringBuffer();
      for (int k = 0; k<table.getColumnCount(); k++){
        buffer.append(table.getValueAt(j,k));
        if(k!=table.getColumnCount()) buffer.append(" ");
      }
      writer.write(buffer.toString()+"\r\n");
    }
  }finally{
    writer.close();
  }
}
    */
    // </editor-fold>
    
    /**
     * @param args the command line arguments
     */
   public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormMain().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnAnalizarSintactico;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblScanner;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
